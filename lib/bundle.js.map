{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/aggro.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,QAAQ,WAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,iEAAiE,YAAY;AAC7E;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC,6BAA6B,yBAAyB;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,6CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/aggro.js\");\n","const canvasContainer = document.getElementById('canvasContainer')\nconst canvas = document.getElementsByTagName('canvas')[0]\nconst startButton = document.getElementById('startButton')\nconst timer = document.getElementById('timer')\nconst welcome = document.getElementById('welcome-header')\nconst defaultCanvasWidth = 1200\nconst defaultCanvasHeight = 600\nconst midCanvasWidth = 2400\nconst midCanvasHeight = 1200\nconst maxCanvasWidth = 4800\nconst maxCanvasHeight = 2400\nlet time, currentTime\nlet count = 0\n\n// class Background {\n//   constructor () {\n//     this.x = 0\n//     this.y = 0\n//     this.background = new Image()\n//     this.background.src = 'lib/images/geometric-background.png'\n//     this.draw = this.draw.bind(this)\n//   }\n\n//   draw () {\n//     context.drawImage(this.background,\n//       this.x - camera.pos.x, this.y - camera.pos.y)\n//   }\n// }\n\nfunction randomColor () {\n  const colors = ['#AFDCEB', '#CAE9F5', '#F0F8FF', '#ADD8E6', '#86C5D8']\n  return colors[Math.floor(Math.random() * colors.length)]\n}\n\nclass Gem {\n  constructor (x, y, color, value) {\n    this.pos = {x: x, y: y}\n    this.color = color\n    this.width = 15\n    this.height = 15\n    this.value = value\n    this.collision = false\n    this.draw = this.draw.bind(this)\n  }\n\n  growObject (object) {\n    if (object.width < object.maxSize) {\n      object.width += this.value / 2\n      object.height += this.value / 2\n    } else {\n      return null\n    }\n  }\n\n  collideWith (otherObject) {\n    this.collision = true\n    this.growObject(otherObject)\n  }\n\n  isCollidedWith (otherObject) {\n    if (this.pos.x < otherObject.x + (otherObject.width / 2) &&\n    this.pos.x + this.width > otherObject.x - (otherObject.width / 2) &&\n    this.pos.y < otherObject.y + (otherObject.height / 2) &&\n    this.pos.y + this.height > otherObject.y - (otherObject.height / 2)) {\n      return true\n    }\n  }\n\n  draw () {\n    if (this.isCollidedWith(player)) {\n      this.collideWith(player)\n    }\n    context.fillStyle = this.color\n    context.fillRect(this.pos.x - camera.pos.x,\n      this.pos.y - camera.pos.y,\n      this.width, this.height)\n    context.strokeStyle = '#000'\n  }\n}\n\nclass Player {\n  constructor () {\n    this.x = canvas.width / 2\n    this.y = canvas.height / 2\n    this.speed = {x: 0, y: 0}\n    this.maxSpeed = {x: 3, y: 3}\n    this.width = 35\n    this.height = 35\n    this.maxSize = 1000\n    this.dead = false\n    this.color = randomColor()\n    this.draw = this.draw.bind(this)\n    this.shrink = this.shrink.bind(this)\n  }\n\n  move () {\n    let centerX = canvasContainer.offsetWidth / 2\n    let centerY = canvasContainer.offsetHeight / 2\n    this.speed.x += (mousePos.x - centerX) / centerX\n    if (Math.abs(this.speed.x) > this.maxSpeed.x) {\n      this.speed.x = Math.sign(this.speed.x) * this.maxSpeed.x\n    }\n    this.speed.y += (mousePos.y - centerY) / centerY\n    if (Math.abs(this.speed.y) > this.maxSpeed.y) {\n      this.speed.y = Math.sign(this.speed.y) * this.maxSpeed.y\n    }\n  }\n\n  shrink () {\n    let level = Math.floor(time / 60)\n    if (level < 2) {\n      this.width -= 0.02\n      this.height -= 0.02\n      this.maxSpeed.x = 3\n      this.maxSpeed.y = 3\n    } else if (level > 2 && level < 5) {\n      this.width -= 0.05\n      this.height -= 0.05\n      this.maxSpeed.x = 5\n      this.maxSpeed.y = 5\n    } else {\n      this.width -= 0.1\n      this.height -= 0.1\n      this.maxSpeed.x = 7\n      this.maxSpeed.y = 7\n    }\n  }\n\n  draw () {\n    this.shrink()\n    if (this.x - (this.width / 2) < 0) {\n      this.x = 0 + (this.width / 2)\n      this.speed.x = 0\n    }\n    if (this.y - (this.height / 2) < 0) {\n      this.y = 0 + (this.height / 2)\n      this.speed.y = 0\n    }\n    if (this.x + (this.width / 2) > 5000) {\n      this.x = 5000 - (this.width / 2)\n      this.speed.x = 0\n    }\n    if (this.y + (this.height / 2) > 3750) {\n      this.y = 3750 - (this.height / 2)\n      this.speed.y = 0\n    }\n    this.x += this.speed.x\n    this.y += this.speed.y\n    context.fillStyle = this.color\n    context.fillRect(this.x - camera.pos.x - (this.width / 2),\n      this.y - camera.pos.y - (this.height / 2),\n      this.width, this.height)\n  }\n}\n// GAME LOGIC //\nlet gemsArray = []\nconst context = canvas.getContext('2d')\nconst mousePos = {x: 0, y: 0}\nconst camera = {\n  pos: {x: 0, y: 0},\n  updatePos: function () {\n    this.pos.x = player.x - (canvas.width / 2)\n    this.pos.y = player.y - (canvas.height / 2)\n  }\n}\nlet endGameText = null\nconst scoreText = document.getElementById('scoreData')\n\n// let background = new Background()\nlet player = new Player()\nconst gems = (num, difficulty = null) => {\n  for (let index = 0; index < num; index++) {\n    let pos = {\n      x: Math.floor(Math.random() * 4985),\n      y: Math.floor(Math.random() * 3735)\n    }\n    let picker = Math.ceil(Math.random() * 50)\n    let color, value\n    if (picker < 2) {\n      color = '#7B85AD'\n      value = 15\n    } else if (picker > 1 && picker <= 5) {\n      color = '#515E91'\n      value = 6\n    } else if (picker > 5 && picker < 25) {\n      color = '#172457'\n      value = 4\n    } else if (difficulty) {\n      color = 'red'\n      value = -10\n    } else {\n      color = '#303C74'\n      value = 2\n    }\n    gemsArray.push(new Gem(pos.x, pos.y, color, value))\n  }\n}\n\nfunction levelLogic (gem, idx, difficulty) {\n  let roll = Math.ceil(Math.random() * 10)\n  if (difficulty <= 1) {\n    gemsArray[idx] = null\n    gems(1)\n  } else if (difficulty > 1 && difficulty <= 2) {\n    gemsArray[idx] = null\n    if (roll > 5) {\n      gems(1)\n    }\n  } else if (difficulty > 2 && difficulty < 5) {\n    gemsArray[idx] = null\n    if (roll > 7) {\n      gems(1)\n    } else {\n      gems(1, difficulty)\n    }\n  } else if (difficulty >= 5) {\n    gemsArray[idx] = null\n    gems(1, difficulty)\n    if (roll > 9) {\n      gems(3)\n    } else {\n      gems(1)\n    }\n  }\n}\n\nfunction updateGems () {\n  let level = Math.floor(time / 60)\n  gemsArray.forEach((gem, idx) => {\n    if (gem && gem.collision) {\n      levelLogic(gem, idx, level)\n    } else if (gem) {\n      gem.draw()\n    }\n  })\n}\n\nfunction endGame () {\n  if (player.width < 1) {\n    startButton.innerText = 'retry'\n    startButton.addEventListener('click', handleStart)\n    startButton.style.cssText = 'display: block;'\n    endGameText = `you have starved to death, you survived for ${currentTime}`\n    gemsArray = []\n    return endGameText\n  } else {\n    return null\n  }\n}\n\nfunction resizeCanvas () {\n  if (player.width > 400 && player.width < 700 && canvas.width !== midCanvasWidth) {\n    canvas.height = midCanvasHeight\n    canvas.width = midCanvasWidth\n  } else if (player.width > 700 && canvas.width !== maxCanvasWidth) {\n    canvas.height = maxCanvasHeight\n    canvas.width = maxCanvasWidth\n  } else if (player.width < 350 && canvas.width !== defaultCanvasWidth) {\n    canvas.height = defaultCanvasHeight\n    canvas.width = defaultCanvasWidth\n  } else {\n    return null\n  }\n}\n\nfunction secondsToHms (d) {\n  d = Number(d)\n  let h = Math.floor(d / 3600)\n  let m = Math.floor(d % 3600 / 60)\n  let s = Math.floor(d % 3600 % 60)\n\n  let hDisplay = h > 0 ? h + (h === 1 ? ' hour, ' : ' hours, ') : ''\n  let mDisplay = m > 0 ? m + (m === 1 ? ' minute, ' : ' minutes, ') : ''\n  let sDisplay = s > 0 ? s + (s === 1 ? ' second' : ' seconds') : ''\n  return hDisplay + mDisplay + sDisplay\n}\n\nfunction tick () {\n  count += 1\n  if (count === 60) {\n    time += 1\n    count = 0\n  }\n  currentTime = secondsToHms(time)\n}\n\nfunction animate () {\n  context.clearRect(player.x - camera.pos.x - (canvas.width / 2), player.y - camera.pos.y - (canvas.height / 2), canvas.width + 5, canvas.height + 5)\n  if (endGame()) {\n    context.font = '30px Arial'\n    context.fillStyle = '#fff'\n    context.textAlign = 'center'\n    context.fillText(endGameText, player.x - camera.pos.x, player.y - camera.pos.y - 50)\n  } else {\n    resizeCanvas()\n    context.fillStyle = 'transparent'\n    context.fillRect(0, 0, canvas.width, canvas.height)\n    // background.draw()\n    updateGems()\n    camera.updatePos()\n    player.move()\n    player.draw()\n    tick()\n    timer.innerText = `${currentTime}`\n    scoreText.innerText = `${Math.floor(player.width)}`\n    requestAnimationFrame(animate)\n  }\n}\n\nfunction handleStart () {\n  time = 0\n  // background = new Background()\n  player = new Player()\n  welcome.style.cssText = 'display: none;'\n  startButton.style.cssText = 'display: none;'\n  gems(500)\n  animate()\n}\n\nstartButton.addEventListener('click', handleStart)\ncanvas.addEventListener('mousemove',\n  (e) => {\n    mousePos.x = e.clientX - canvas.offsetLeft\n    mousePos.y = e.clientY - canvas.offsetTop\n  })\n"],"sourceRoot":""}